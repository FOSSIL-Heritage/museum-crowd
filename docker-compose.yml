version: "3"
services:
  zookeeper:
    container_name: crowd-zookeeper
    image: 'bitnami/zookeeper:3'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    container_name: crowd-kafka
    restart: always
    image: 'bitnami/kafka:2'
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://35.193.220.65:9092
    depends_on:
      - zookeeper
  database:
    container_name: crowd-database
    image: mongo:5.0
    command: mongod --quiet --logpath /dev/null
    expose:
      - 27017
    ports:
      - 27017:27017
    environment:
      - NODE_ENV=development
      - MONGO_INITDB_ROOT_USERNAME=AzureDiamond
      - MONGO_INITDB_ROOT_PASSWORD=hunter2
    volumes:
      - mongodb_data:/data/db
  warehouse:
    container_name: crowd-warehouse
    build:
      context: ./warehouse
      dockerfile: Dockerfile
    volumes:
      - ./warehouse/src:/usr/src/app/src
    ports:
      - 3000:3000
    environment:
      - PORT=3000
      - SERVICE_REGISTRY_NAME=registry
      - SERVICE_NAME=crowd-warehouse
    depends_on:
      - kafka
      - database

  analytics:
    container_name: crowd-analytics
    build:
      context: ./analytics
      dockerfile: Dockerfile
    volumes:
      - ./analytics/src:/usr/src/app/src
    ports:
      - 3001:3001
    environment:
      - PORT=3001
      - WAREHOUSE_SERVICE_URI=http://warehouse:3000
      - SERVICE_REGISTRY_NAME=registry
      - SERVICE_NAME=crowd-analytics

  monitoring:
    container_name: crowd-monitoring
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    volumes:
      - ./monitoring/src:/usr/src/app/src
    ports:
      - 3002:3002
    environment:
      - PORT=3002
      - WAREHOUSE_SERVICE_URI=http://warehouse:3000
      - SERVICE_REGISTRY_NAME=registry
      - SERVICE_NAME=crowd-monitoring

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:

networks:
  default:
    external: true
    name: spring-cloud-network